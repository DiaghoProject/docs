{"config":{"indexing":"full","lang":["fr","en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Info This documentation is currently being written. Complements and modifications will be made as the Diagho project progresses.","title":"Home"},{"location":"advanced/admin/","text":"The Diagho admin site","title":"The Diagho admin site"},{"location":"advanced/admin/#the-diagho-admin-site","text":"","title":"The Diagho admin site"},{"location":"advanced/architecture/","text":"Diagho Architecture","title":"Diagho Architecture"},{"location":"advanced/architecture/#diagho-architecture","text":"","title":"Diagho Architecture"},{"location":"advanced/diagho-core/","text":"diagho-core","title":"diagho-core"},{"location":"advanced/diagho-core/#diagho-core","text":"","title":"diagho-core"},{"location":"advanced/diagho-vep/","text":"diagho-vep","title":"diagho-vep"},{"location":"advanced/diagho-vep/#diagho-vep","text":"","title":"diagho-vep"},{"location":"appendices/abbreviations/","text":"Abbreviations abbreviation definition DNA deoxyribonucleic acid RNA ribonucleic acid RNA-Seq RNA sequencing GVCF GVCF stands for Genomic VCF. A GVCF is a kind of VCF, so the basic format specification is the same as for a regular VCF, but a Genomic VCF contains extra information. See GVCF - Genomic Variant Call Format","title":"Abbreviations"},{"location":"appendices/abbreviations/#abbreviations","text":"abbreviation definition DNA deoxyribonucleic acid RNA ribonucleic acid RNA-Seq RNA sequencing GVCF GVCF stands for Genomic VCF. A GVCF is a kind of VCF, so the basic format specification is the same as for a regular VCF, but a Genomic VCF contains extra information. See GVCF - Genomic Variant Call Format","title":"Abbreviations"},{"location":"appendices/lexicon/","text":"Lexicon anglais fran\u00e7ais definition project projet patient patient user utilisateur A registered user of the application. analysis analyse sample \u00e9chantillon reader lecteur reference genome reference assembly g\u00e9nome r\u00e9f\u00e9rence Reference genome - Wikipedia variant variant variation record enregistrement","title":"Lexicon"},{"location":"appendices/lexicon/#lexicon","text":"anglais fran\u00e7ais definition project projet patient patient user utilisateur A registered user of the application. analysis analyse sample \u00e9chantillon reader lecteur reference genome reference assembly g\u00e9nome r\u00e9f\u00e9rence Reference genome - Wikipedia variant variant variation record enregistrement","title":"Lexicon"},{"location":"development/coding_style/","text":"Coding style (fr) Warning This page will be translated into English during the next updates. Le projet Diagho est structur\u00e9 en de nombreux microservices \u00e9crit dans diff\u00e9rents langages. Pour faciliter la lecture et le maintient du code, nous nous appuyons sur des bonnes pratiques d'\u00e9criture de code, ou coding style , qui peuvent diff\u00e9rer en fonction du langage utilis\u00e9. Python L'ensemble des fichiers sources \u00e9crits dans le langage Python doit \u00eatre format\u00e9 automatiquement \u00e0 l'aide du module Black qui s'appuie sur les recommendations \u00e9dit\u00e9es dans le Guide du d\u00e9veloppeur Python . Elm L'ensemble des fichiers sources \u00e9crits dans le langage Elm doit \u00eatre format\u00e9 automatiquement \u00e0 l'aide de l'outil elm-format qui s'appuie sur le guide officiel Elm .","title":"Coding style (fr)"},{"location":"development/coding_style/#coding-style-fr","text":"Warning This page will be translated into English during the next updates. Le projet Diagho est structur\u00e9 en de nombreux microservices \u00e9crit dans diff\u00e9rents langages. Pour faciliter la lecture et le maintient du code, nous nous appuyons sur des bonnes pratiques d'\u00e9criture de code, ou coding style , qui peuvent diff\u00e9rer en fonction du langage utilis\u00e9.","title":"Coding style (fr)"},{"location":"development/coding_style/#python","text":"L'ensemble des fichiers sources \u00e9crits dans le langage Python doit \u00eatre format\u00e9 automatiquement \u00e0 l'aide du module Black qui s'appuie sur les recommendations \u00e9dit\u00e9es dans le Guide du d\u00e9veloppeur Python .","title":"Python"},{"location":"development/coding_style/#elm","text":"L'ensemble des fichiers sources \u00e9crits dans le langage Elm doit \u00eatre format\u00e9 automatiquement \u00e0 l'aide de l'outil elm-format qui s'appuie sur le guide officiel Elm .","title":"Elm"},{"location":"development/front/","text":"Front Bundle module with webpack Connection to container diagho_frontend Install the library / framework 1 npm install --save-dev bootstrap Update naming version in package.json and update dependencies 1 2 3 \"bootstrap\": \"~5.1.3\", npm update # Check if a new version is available Import scss and js Create scss file in frontend/src/scss/ and js file in frontend/src Link the library / framework with webpack Import your library / framework in a js file for the template frontend/src/common/django and create an entry in webpack conf webpack.django.js Create a bundle Build Webpack to create a bundle and call it in your back's template 1 npm run build Collectstatic In the container diagho_core we need to collect the static files into STATIC_ROOT 1 make collectstatic","title":"Front"},{"location":"development/front/#front","text":"","title":"Front"},{"location":"development/front/#bundle-module-with-webpack","text":"Connection to container diagho_frontend Install the library / framework 1 npm install --save-dev bootstrap Update naming version in package.json and update dependencies 1 2 3 \"bootstrap\": \"~5.1.3\", npm update # Check if a new version is available Import scss and js Create scss file in frontend/src/scss/ and js file in frontend/src Link the library / framework with webpack Import your library / framework in a js file for the template frontend/src/common/django and create an entry in webpack conf webpack.django.js Create a bundle Build Webpack to create a bundle and call it in your back's template 1 npm run build Collectstatic In the container diagho_core we need to collect the static files into STATIC_ROOT 1 make collectstatic","title":"Bundle module with webpack"},{"location":"development/licensing/","text":"Licensing Info In progress...","title":"Licensing"},{"location":"development/licensing/#licensing","text":"Info In progress...","title":"Licensing"},{"location":"development/naming_convention/","text":"Naming Convention Django Models URL Frontend The naming convention is based on Django admin site naming convention. For a Bar model in a foo app, the URLs would be : action URL list /foo/bar/ create /foo/bar/add/ detail /foo/bar/1/ update /foo/bar/1/change/ delete /foo/bar/1/delete/ any methods not dependent on an object /foo/bar/view-name any methods dependent on a particular objec /foo/bar/1/view-name API The naming convention is based on Django REST Framework naming convention. For a Bar model in a foo app, the URLs would be : action URL list /api/v1/foo/bars/ create /api/v1/foo/bars/new/ detail /api/v1/foo/bars/1/ update /api/v1/foo/bars/1/edit/ delete /api/v1/foo/bars/1/delete/ any methods not dependent on an object /api/v1/foo/bars/view-name any methods dependent on a particular objec /api/v1/foo/bars/1/view-name Views For a Bar model in a foo app, the view names would be : Generic display views Specific display views DetailView BarDetailView ListView BarListView Generic editing views Specific editing views CreateView BarCreateView UpdateView BarUpdateView DeleteView BarDeleteView Templates For a Bar model in a foo app, the template names would be : action URL list /templates/foo/bar_list.html create /templates/foo/bar_form.html detail /templates/foo/bar_detail.html update /templates/foo/bar_form.html delete /templates/foo/bar_confirm_delete.html For core/templates/core the generics templates names would be : bulma component function/specificity URL card a generic card core/cards/generic.html card a toggleable card core/cards/toggleable.html table an annotation table core/tables/annotation.html For a bar model in a foo app, the non-main templates names would be : main bulma component function/specificity URL card a bar info card foo/cards/bar_details.html card a bar list card foo/cards/bar_list.html table a bar list table foo/tables/bar_list.html navbar* a table upper navbar foo/navbars/table.html *When it is not refer to specifics objects, consider name the templates with the type of elements wich it refer such as table.html in the navbars folder in order to name a template that include a navbar that is link to a table . Example : in core/templates/core 1 2 3 4 5 6 \u2514\u2500\u2500 templates \u2514\u2500\u2500 core \u2514\u2500\u2500 cards \u251c\u2500\u2500 list_vertical.html \u251c\u2500\u2500 list_horizontal.html \u2514\u2500\u2500 object_infos.html in a foo app with bar and baz models 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 \u2514\u2500\u2500 templates \u2514\u2500\u2500 foo | \u251c\u2500\u2500 block | \u2514\u2500\u2500 filters.html | \u251c\u2500\u2500 cards | \u251c\u2500\u2500 bar_detail.html | \u2514\u2500\u2500 baz_list.html | \u251c\u2500\u2500 tables | \u2514\u2500\u2500 bar_list.html | \u251c\u2500\u2500 navbars | \u2514\u2500\u2500 table.html | \u251c\u2500\u2500 bar_form.html \u251c\u2500\u2500 bar_detail.html \u251c\u2500\u2500 bar_list.html \u2514\u2500\u2500 base.html Generic template inheritance example: Generic card template in core/templates/core/cards/object_infos.html 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 < div class = \"card\" > < header class = \"card-header\" > < h1 class = \"title is-5\" > {% block card_header %} {% endblock card_header %} </ h1 > </ header > < div class = \"card-content\" > < div class = \"content\" > {% block card_body %} {% endblock card_body %} </ div > </ div > </ div > Application specific specific card template for a bar model in a foo app, in foo/templates/foo/cards/bar_details 1 2 3 4 5 6 7 8 9 {% extends \"core/cards/object_infos.html\" %} {% block card_header %} TITLE {% endblock card_header %} {% block card_body %} CONTENT {% endblock card_body %} Generic template inheritance example with template that inherit from base template As you can't include multiple extends statement in the same template, if you need to use an include statement with an other template like this : Detail view main template for a bar model in a foo app, in `foo/templates/foo/bar_detail.html 1 2 3 {% extends \"foo/base.html\" %} {% include \"foo/cards/bar_detail.html\" %}","title":"Naming Convention"},{"location":"development/naming_convention/#naming-convention","text":"","title":"Naming Convention"},{"location":"development/naming_convention/#django","text":"","title":"Django"},{"location":"development/naming_convention/#models","text":"","title":"Models"},{"location":"development/naming_convention/#url","text":"","title":"URL"},{"location":"development/naming_convention/#frontend","text":"The naming convention is based on Django admin site naming convention. For a Bar model in a foo app, the URLs would be : action URL list /foo/bar/ create /foo/bar/add/ detail /foo/bar/1/ update /foo/bar/1/change/ delete /foo/bar/1/delete/ any methods not dependent on an object /foo/bar/view-name any methods dependent on a particular objec /foo/bar/1/view-name","title":"Frontend"},{"location":"development/naming_convention/#api","text":"The naming convention is based on Django REST Framework naming convention. For a Bar model in a foo app, the URLs would be : action URL list /api/v1/foo/bars/ create /api/v1/foo/bars/new/ detail /api/v1/foo/bars/1/ update /api/v1/foo/bars/1/edit/ delete /api/v1/foo/bars/1/delete/ any methods not dependent on an object /api/v1/foo/bars/view-name any methods dependent on a particular objec /api/v1/foo/bars/1/view-name","title":"API"},{"location":"development/naming_convention/#views","text":"For a Bar model in a foo app, the view names would be : Generic display views Specific display views DetailView BarDetailView ListView BarListView Generic editing views Specific editing views CreateView BarCreateView UpdateView BarUpdateView DeleteView BarDeleteView","title":"Views"},{"location":"development/naming_convention/#templates","text":"For a Bar model in a foo app, the template names would be : action URL list /templates/foo/bar_list.html create /templates/foo/bar_form.html detail /templates/foo/bar_detail.html update /templates/foo/bar_form.html delete /templates/foo/bar_confirm_delete.html For core/templates/core the generics templates names would be : bulma component function/specificity URL card a generic card core/cards/generic.html card a toggleable card core/cards/toggleable.html table an annotation table core/tables/annotation.html For a bar model in a foo app, the non-main templates names would be : main bulma component function/specificity URL card a bar info card foo/cards/bar_details.html card a bar list card foo/cards/bar_list.html table a bar list table foo/tables/bar_list.html navbar* a table upper navbar foo/navbars/table.html *When it is not refer to specifics objects, consider name the templates with the type of elements wich it refer such as table.html in the navbars folder in order to name a template that include a navbar that is link to a table .","title":"Templates"},{"location":"development/naming_convention/#example","text":"in core/templates/core 1 2 3 4 5 6 \u2514\u2500\u2500 templates \u2514\u2500\u2500 core \u2514\u2500\u2500 cards \u251c\u2500\u2500 list_vertical.html \u251c\u2500\u2500 list_horizontal.html \u2514\u2500\u2500 object_infos.html in a foo app with bar and baz models 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 \u2514\u2500\u2500 templates \u2514\u2500\u2500 foo | \u251c\u2500\u2500 block | \u2514\u2500\u2500 filters.html | \u251c\u2500\u2500 cards | \u251c\u2500\u2500 bar_detail.html | \u2514\u2500\u2500 baz_list.html | \u251c\u2500\u2500 tables | \u2514\u2500\u2500 bar_list.html | \u251c\u2500\u2500 navbars | \u2514\u2500\u2500 table.html | \u251c\u2500\u2500 bar_form.html \u251c\u2500\u2500 bar_detail.html \u251c\u2500\u2500 bar_list.html \u2514\u2500\u2500 base.html","title":"Example :"},{"location":"development/naming_convention/#generic-template-inheritance-example","text":"Generic card template in core/templates/core/cards/object_infos.html 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 < div class = \"card\" > < header class = \"card-header\" > < h1 class = \"title is-5\" > {% block card_header %} {% endblock card_header %} </ h1 > </ header > < div class = \"card-content\" > < div class = \"content\" > {% block card_body %} {% endblock card_body %} </ div > </ div > </ div > Application specific specific card template for a bar model in a foo app, in foo/templates/foo/cards/bar_details 1 2 3 4 5 6 7 8 9 {% extends \"core/cards/object_infos.html\" %} {% block card_header %} TITLE {% endblock card_header %} {% block card_body %} CONTENT {% endblock card_body %}","title":"Generic template inheritance example:"},{"location":"development/naming_convention/#generic-template-inheritance-example-with-template-that-inherit-from-base-template","text":"As you can't include multiple extends statement in the same template, if you need to use an include statement with an other template like this : Detail view main template for a bar model in a foo app, in `foo/templates/foo/bar_detail.html 1 2 3 {% extends \"foo/base.html\" %} {% include \"foo/cards/bar_detail.html\" %}","title":"Generic template inheritance example with template that inherit from base template"},{"location":"development/tests/","text":"Testing Strategy Types of testing Unit testing (Dev) It means testing individual modules of an application in isolation (without any interaction with dependencies) to confirm that the code is doing things right. Integration testing (Dev) It means checking if different modules are working fine when combined together as a group. Functional testing (Dev for automated test or user) It means testing a slice of functionality in the system (may interact with dependencies) to confirm that the code is doing the right things. Acceptance testing (User or Biologist) The final level, Acceptance testing (or User Acceptance Testing), is conducted to determine whether the system is ready for release Our Strategy based on TDD 1- Create pull request with : Definition of done (Same for each pull request) Test plan List of tasks 2- Write documentation 3- Create units and integrations tests in parallel to the development 4- When the development is over, launch tox to : Check format and linters Run units and integrations tests with pytest-django 5- Code review -> If code review is passed we merge into staging 6- Run functional test based on the test plan -> If functionals tests are passed we merge into main","title":"Testing Strategy"},{"location":"development/tests/#testing-strategy","text":"","title":"Testing Strategy"},{"location":"development/tests/#types-of-testing","text":"","title":"Types of testing"},{"location":"development/tests/#unit-testing-dev","text":"It means testing individual modules of an application in isolation (without any interaction with dependencies) to confirm that the code is doing things right.","title":"Unit testing (Dev)"},{"location":"development/tests/#integration-testing-dev","text":"It means checking if different modules are working fine when combined together as a group.","title":"Integration testing (Dev)"},{"location":"development/tests/#functional-testing-dev-for-automated-test-or-user","text":"It means testing a slice of functionality in the system (may interact with dependencies) to confirm that the code is doing the right things.","title":"Functional testing (Dev for automated test or user)"},{"location":"development/tests/#acceptance-testing-user-or-biologist","text":"The final level, Acceptance testing (or User Acceptance Testing), is conducted to determine whether the system is ready for release","title":"Acceptance testing (User or Biologist)"},{"location":"development/tests/#our-strategy-based-on-tdd","text":"1- Create pull request with : Definition of done (Same for each pull request) Test plan List of tasks 2- Write documentation 3- Create units and integrations tests in parallel to the development 4- When the development is over, launch tox to : Check format and linters Run units and integrations tests with pytest-django 5- Code review -> If code review is passed we merge into staging 6- Run functional test based on the test plan -> If functionals tests are passed we merge into main","title":"Our Strategy based on TDD"},{"location":"development/versioning/","text":"Versioning (fr) Warning This page will be translated into English during the next updates. Gestion s\u00e9mantique de version Pour num\u00e9roter les versions des diff\u00e9rents modules de Diagho , nous nous appuyons sur la sp\u00e9cification SemVer , ou Semantic Versioning Specification . En bref, \u00e9tant donn\u00e9 un num\u00e9ro de version MAJEUR.MINEUR.CORRECTIF , il faut incr\u00e9menter : le num\u00e9ro de version MAJEUR quand il y a des changements non r\u00e9trocompatibles ; le num\u00e9ro de version MINEUR quand il y a des ajouts de fonctionnalit\u00e9s r\u00e9trocompatibles ; le num\u00e9ro de version de CORRECTIF quand il y a des corrections d\u2019anomalies r\u00e9trocompatibles. Note L\u2019identifiant de version majeure z\u00e9ro 0.1.0 est destin\u00e9 au d\u00e9veloppement initial. Tout ou partie peut \u00eatre modifi\u00e9 \u00e0 tout moment. Note Lorsque l\u2019API publique est consid\u00e9r\u00e9e stable, l'identifiant de version majeure est incr\u00e9ment\u00e9 \u00e0 1.0.0 . Le fichier CHANGELOG.md Pour chaque repo du projet, un journal des modifications doit \u00eatre tenu, g\u00e9n\u00e9ralement dans le fichier CHANGELOG.md . Exemple de contenu : 1 2 3 4 5 6 # Changelog ## 0.1.0 (unreleased) ### Initial version - Creation of this very application from scratch.","title":"Versioning (fr)"},{"location":"development/versioning/#versioning-fr","text":"Warning This page will be translated into English during the next updates.","title":"Versioning (fr)"},{"location":"development/versioning/#gestion-semantique-de-version","text":"Pour num\u00e9roter les versions des diff\u00e9rents modules de Diagho , nous nous appuyons sur la sp\u00e9cification SemVer , ou Semantic Versioning Specification . En bref, \u00e9tant donn\u00e9 un num\u00e9ro de version MAJEUR.MINEUR.CORRECTIF , il faut incr\u00e9menter : le num\u00e9ro de version MAJEUR quand il y a des changements non r\u00e9trocompatibles ; le num\u00e9ro de version MINEUR quand il y a des ajouts de fonctionnalit\u00e9s r\u00e9trocompatibles ; le num\u00e9ro de version de CORRECTIF quand il y a des corrections d\u2019anomalies r\u00e9trocompatibles. Note L\u2019identifiant de version majeure z\u00e9ro 0.1.0 est destin\u00e9 au d\u00e9veloppement initial. Tout ou partie peut \u00eatre modifi\u00e9 \u00e0 tout moment. Note Lorsque l\u2019API publique est consid\u00e9r\u00e9e stable, l'identifiant de version majeure est incr\u00e9ment\u00e9 \u00e0 1.0.0 .","title":"Gestion s\u00e9mantique de version"},{"location":"development/versioning/#le-fichier-changelogmd","text":"Pour chaque repo du projet, un journal des modifications doit \u00eatre tenu, g\u00e9n\u00e9ralement dans le fichier CHANGELOG.md . Exemple de contenu : 1 2 3 4 5 6 # Changelog ## 0.1.0 (unreleased) ### Initial version - Creation of this very application from scratch.","title":"Le fichier CHANGELOG.md"},{"location":"development/workflow/","text":"Workflow What is workflow ? Project Diagho's codebase is hosted on GitHub . To maintain a consistent codebase and facilitate collaboration between contributors, we rely on GitHub flow to define development rules. GitHub flow is one of the workflows commonly used for open sources project and can be summarized in a few main points: main branch is always stable and deployable ; Tags on branch main as considered as releases ; Contributors must fork or create new branches (if they got rights on original repo) to add new features or fix bugs and pull request to merge their branch into main . In practice Clone or fork local code 1 $ git clone git@github.com:DiaghoProject/diagho.git Create a new branch and switch to it 1 $ git checkout -b name-of-your-bugfix-or-feature Upstream branch 1 $ git push --set-upstream origin name-of-your-bugfix-or-feature or 1 $ git push -u origin name-of-your-bugfix-or-feature Add commits and push your branch on Github 1 2 3 $ git add . $ git commit -m \"Detailed description of your changes.\" $ git push Open a Pull Request Create a pull request on github from your branch to staging . Code review When your code is ready, make sure all the points of the list below are checked: [x] My code follows the style guidelines of this project [x] I have performed a self-review of my code [x] I have commented my code, particularly in hard-to-understand areas [x] I have made corresponding changes to the documentation [x] I have added tests that prove my fix is effective or that my feature works [x] New and existing unit tests pass locally with my changes [x] I have assigned a reviewer and updated my code if it was needed Deployment Squash and merge yout branch into staging . Merge staging into main Define this process Ressources Understanding the GitHub flow","title":"Workflow"},{"location":"development/workflow/#workflow","text":"","title":"Workflow"},{"location":"development/workflow/#what-is-workflow","text":"Project Diagho's codebase is hosted on GitHub . To maintain a consistent codebase and facilitate collaboration between contributors, we rely on GitHub flow to define development rules. GitHub flow is one of the workflows commonly used for open sources project and can be summarized in a few main points: main branch is always stable and deployable ; Tags on branch main as considered as releases ; Contributors must fork or create new branches (if they got rights on original repo) to add new features or fix bugs and pull request to merge their branch into main .","title":"What is workflow ?"},{"location":"development/workflow/#in-practice","text":"","title":"In practice"},{"location":"development/workflow/#clone-or-fork-local-code","text":"1 $ git clone git@github.com:DiaghoProject/diagho.git","title":"Clone or fork local code"},{"location":"development/workflow/#create-a-new-branch-and-switch-to-it","text":"1 $ git checkout -b name-of-your-bugfix-or-feature","title":"Create a new branch and switch to it"},{"location":"development/workflow/#upstream-branch","text":"1 $ git push --set-upstream origin name-of-your-bugfix-or-feature or 1 $ git push -u origin name-of-your-bugfix-or-feature","title":"Upstream branch"},{"location":"development/workflow/#add-commits-and-push-your-branch-on-github","text":"1 2 3 $ git add . $ git commit -m \"Detailed description of your changes.\" $ git push","title":"Add commits and push your branch on Github"},{"location":"development/workflow/#open-a-pull-request","text":"Create a pull request on github from your branch to staging .","title":"Open a Pull Request"},{"location":"development/workflow/#code-review","text":"When your code is ready, make sure all the points of the list below are checked: [x] My code follows the style guidelines of this project [x] I have performed a self-review of my code [x] I have commented my code, particularly in hard-to-understand areas [x] I have made corresponding changes to the documentation [x] I have added tests that prove my fix is effective or that my feature works [x] New and existing unit tests pass locally with my changes [x] I have assigned a reviewer and updated my code if it was needed","title":"Code review"},{"location":"development/workflow/#deployment","text":"Squash and merge yout branch into staging .","title":"Deployment"},{"location":"development/workflow/#merge-staging-into-main","text":"Define this process","title":"Merge staging into main"},{"location":"development/workflow/#ressources","text":"Understanding the GitHub flow","title":"Ressources"},{"location":"development/best_practices/insert_icons/","text":"Icons Presentation To insert icons in our html page, we use the unified icon framework : Iconify which is managed by webpack. We just need to find an icon in icones.js , icones.js collects a large database of icons from other icons manager website and gather it all. Because we are using Bulma like css framework, we need to integrates our icons into it. How to insert icons with bulma Choose an icon in icones.js and copy the id Insert into HTML page the markup bellow in depending on the case and replace data-icon with the copied id Generic usage 1 <span class=\"iconify-inline\" data-icon=\"fa6-solid:virus\"></span> Exceptions (For Bulma tabs) 1 2 3 <span class=\"icon is-small\"> <span class=\"iconify-inline\" data-icon=\"fa6-solid:image\"></span></span> <span>Pictures</span>","title":"Icons"},{"location":"development/best_practices/insert_icons/#icons","text":"","title":"Icons"},{"location":"development/best_practices/insert_icons/#presentation","text":"To insert icons in our html page, we use the unified icon framework : Iconify which is managed by webpack. We just need to find an icon in icones.js , icones.js collects a large database of icons from other icons manager website and gather it all. Because we are using Bulma like css framework, we need to integrates our icons into it.","title":"Presentation"},{"location":"development/best_practices/insert_icons/#how-to-insert-icons-with-bulma","text":"Choose an icon in icones.js and copy the id Insert into HTML page the markup bellow in depending on the case and replace data-icon with the copied id","title":"How to insert icons with bulma"},{"location":"development/best_practices/insert_icons/#generic-usage","text":"1 <span class=\"iconify-inline\" data-icon=\"fa6-solid:virus\"></span>","title":"Generic usage"},{"location":"development/best_practices/insert_icons/#exceptions-for-bulma-tabs","text":"1 2 3 <span class=\"icon is-small\"> <span class=\"iconify-inline\" data-icon=\"fa6-solid:image\"></span></span> <span>Pictures</span>","title":"Exceptions (For Bulma tabs)"},{"location":"development/best_practices/internationalization_and_localization/","text":"i18n (fr) Warning This page will be translated into English during the next updates. Internationalisation et r\u00e9gionalisation R\u00e8gles g\u00e9n\u00e9rales Pour faciliter la collaboration, l'ensemble de l'application est \u00e9crite en anglais : le code, les docstrings , les variables, les tests, etc. On utilise ensuite diff\u00e9rents outils (list\u00e9s ci-dessous) pour fournir des traductions de l'interface et des objets. Django : dans le code Python gettext() vs ugettext() Depuis Django 2.0 , il s'agit de synonymes. Voici ce que l'on trouve dans le code source de Django 2.2 : 1 2 # An alias since Django 2.0 ugettext = gettext et un peu plus bas : 1 gettext_lazy = ugettext_lazy = lazy ( gettext , str ) Diff\u00e9rences entre gettext() et gettext_lazy() Dans le code source de Django 3.2 : 1 gettext_lazy = lazy ( gettext , str ) R\u00e9ponse int\u00e9ressante not\u00e9e dans python - When should I use ugettext_lazy? - Stack Overflow : In definitions like forms or models you should use ugettext_lazy because the code of this definitions is only executed once (mostly on django's startup); ugettext_lazy translates the strings in a lazy fashion, which means, eg. every time you access the name of an attribute on a model the string will be newly translated-which totally makes sense because you might be looking at this model in different languages since django was started! In views and similar function calls you can use ugettext without problems, because everytime the view is called ugettext will be newly executed, so you will always get the right translation fitting the request! En r\u00e9sum\u00e9 On n'utilise plus ugettext() et ugettext_lazy() , et on utilise gettext() ou gettext_lazy() en fonction des cas. Contrairement \u00e0 gettext() , gettext_lazy() permet de traduire du texte en diff\u00e9r\u00e9, au moment o\u00f9 la cha\u00eene est r\u00e9ellement utilis\u00e9e plut\u00f4t qu\u2019au moment o\u00f9 la fonction est appel\u00e9e. Cas d'utilisation de gettext() ou gettext_lazy() : gettext() gettext_lazy() views validators admin signal models form apps settings context_processors Pour importer ugettext() (ou ugettext_lazy() ) on utilise l'alias _ : 1 from django.utils.translation import gettext as _ 1 from django.utils.translation import gettext_lazy as _ Ressources Utilitaires Django | Documentation de Django | Django 2.2 Utilitaires Django | Documentation de Django | Django 3.2 Django Tips #18 Difference Between ugettext And ugettext_lazy Traduction | Documentation de Django | Django Django : cr\u00e9er et modifier les fichiers de langues Exemple avec une application fictive bidule \u00e0 laquelle on souhaite ajouter les traductions de l'interface en fran\u00e7ais. Se placer dans le r\u00e9pertoire de l'application bidule et cr\u00e9er le dossier locale (s'il n'existe pas encore) : 1 2 $ cd apps/bidule/ $ mkdir -p locale Pour cr\u00e9er ou mettre \u00e0 jour un fichier de messages en fran\u00e7ais, ex\u00e9cutez la commande : 1 $ ../../venv/bin/django-admin makemessages -l fr Editez le fichier locale/fr/LC_MESSAGES/django.po cr\u00e9\u00e9 et compilez le fichier .po en un fichier .mo : 1 $ ../../venv/bin/django-admin compilemessages Django : traduction des mod\u00e8les Il est quelquefois n\u00e9cessaire de traduire des champs de mod\u00e8le. Pour ce faire, on utilise la librairie django-modeltranslation . Par exemple, voir la traduction des champs tagline et description de la classe SiteCustomization de l'application core . Warning Attention aux interactions entre les librairies django-modeltranslation et django-simple-history ! Ne pas utiliser history = HistoricalRecords() dans un mod\u00e8le lorsque celui-ci comporte des champs marqu\u00e9s par django-modeltranslation , mais utiliser plut\u00f4t le fichier translation.py dans lequel on peut r\u00e9f\u00e9rencer un objet apr\u00e8s avoir configur\u00e9 la traduction. Toujour avec l'exemple pr\u00e9c\u00e9dent : 1 2 translator . register ( SiteCustomization , SiteCustomizationTranslationOptions ) simple_history . register ( SiteCustomization )","title":"i18n (fr)"},{"location":"development/best_practices/internationalization_and_localization/#i18n-fr","text":"Warning This page will be translated into English during the next updates. Internationalisation et r\u00e9gionalisation R\u00e8gles g\u00e9n\u00e9rales Pour faciliter la collaboration, l'ensemble de l'application est \u00e9crite en anglais : le code, les docstrings , les variables, les tests, etc. On utilise ensuite diff\u00e9rents outils (list\u00e9s ci-dessous) pour fournir des traductions de l'interface et des objets.","title":"i18n (fr)"},{"location":"development/best_practices/internationalization_and_localization/#django-dans-le-code-python","text":"","title":"Django : dans le code Python"},{"location":"development/best_practices/internationalization_and_localization/#gettext-vs-ugettext","text":"Depuis Django 2.0 , il s'agit de synonymes. Voici ce que l'on trouve dans le code source de Django 2.2 : 1 2 # An alias since Django 2.0 ugettext = gettext et un peu plus bas : 1 gettext_lazy = ugettext_lazy = lazy ( gettext , str )","title":"gettext() vs ugettext()"},{"location":"development/best_practices/internationalization_and_localization/#differences-entre-gettext-et-gettext_lazy","text":"Dans le code source de Django 3.2 : 1 gettext_lazy = lazy ( gettext , str ) R\u00e9ponse int\u00e9ressante not\u00e9e dans python - When should I use ugettext_lazy? - Stack Overflow : In definitions like forms or models you should use ugettext_lazy because the code of this definitions is only executed once (mostly on django's startup); ugettext_lazy translates the strings in a lazy fashion, which means, eg. every time you access the name of an attribute on a model the string will be newly translated-which totally makes sense because you might be looking at this model in different languages since django was started! In views and similar function calls you can use ugettext without problems, because everytime the view is called ugettext will be newly executed, so you will always get the right translation fitting the request!","title":"Diff\u00e9rences entre gettext() et gettext_lazy()"},{"location":"development/best_practices/internationalization_and_localization/#en-resume","text":"On n'utilise plus ugettext() et ugettext_lazy() , et on utilise gettext() ou gettext_lazy() en fonction des cas. Contrairement \u00e0 gettext() , gettext_lazy() permet de traduire du texte en diff\u00e9r\u00e9, au moment o\u00f9 la cha\u00eene est r\u00e9ellement utilis\u00e9e plut\u00f4t qu\u2019au moment o\u00f9 la fonction est appel\u00e9e. Cas d'utilisation de gettext() ou gettext_lazy() : gettext() gettext_lazy() views validators admin signal models form apps settings context_processors Pour importer ugettext() (ou ugettext_lazy() ) on utilise l'alias _ : 1 from django.utils.translation import gettext as _ 1 from django.utils.translation import gettext_lazy as _","title":"En r\u00e9sum\u00e9"},{"location":"development/best_practices/internationalization_and_localization/#ressources","text":"Utilitaires Django | Documentation de Django | Django 2.2 Utilitaires Django | Documentation de Django | Django 3.2 Django Tips #18 Difference Between ugettext And ugettext_lazy Traduction | Documentation de Django | Django","title":"Ressources"},{"location":"development/best_practices/internationalization_and_localization/#django-creer-et-modifier-les-fichiers-de-langues","text":"Exemple avec une application fictive bidule \u00e0 laquelle on souhaite ajouter les traductions de l'interface en fran\u00e7ais. Se placer dans le r\u00e9pertoire de l'application bidule et cr\u00e9er le dossier locale (s'il n'existe pas encore) : 1 2 $ cd apps/bidule/ $ mkdir -p locale Pour cr\u00e9er ou mettre \u00e0 jour un fichier de messages en fran\u00e7ais, ex\u00e9cutez la commande : 1 $ ../../venv/bin/django-admin makemessages -l fr Editez le fichier locale/fr/LC_MESSAGES/django.po cr\u00e9\u00e9 et compilez le fichier .po en un fichier .mo : 1 $ ../../venv/bin/django-admin compilemessages","title":"Django : cr\u00e9er et modifier les fichiers de langues"},{"location":"development/best_practices/internationalization_and_localization/#django-traduction-des-modeles","text":"Il est quelquefois n\u00e9cessaire de traduire des champs de mod\u00e8le. Pour ce faire, on utilise la librairie django-modeltranslation . Par exemple, voir la traduction des champs tagline et description de la classe SiteCustomization de l'application core . Warning Attention aux interactions entre les librairies django-modeltranslation et django-simple-history ! Ne pas utiliser history = HistoricalRecords() dans un mod\u00e8le lorsque celui-ci comporte des champs marqu\u00e9s par django-modeltranslation , mais utiliser plut\u00f4t le fichier translation.py dans lequel on peut r\u00e9f\u00e9rencer un objet apr\u00e8s avoir configur\u00e9 la traduction. Toujour avec l'exemple pr\u00e9c\u00e9dent : 1 2 translator . register ( SiteCustomization , SiteCustomizationTranslationOptions ) simple_history . register ( SiteCustomization )","title":"Django : traduction des mod\u00e8les"},{"location":"devops/compose/","text":"Deploy Diagho with Docker Compose","title":"Deploy Diagho with Docker Compose"},{"location":"devops/compose/#deploy-diagho-with-docker-compose","text":"","title":"Deploy Diagho with Docker Compose"},{"location":"tutorial/intro/","text":"","title":"Intro"}]}