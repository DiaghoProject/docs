{"config":{"lang":["fr","en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Accueil Info Cette documentation est en cours de r\u00e9daction. Des compl\u00e9ments et des modifications seront apport\u00e9s au fur et \u00e0 mesure de l'avanc\u00e9e du projet Diagho .","title":"Accueil"},{"location":"#accueil","text":"Info Cette documentation est en cours de r\u00e9daction. Des compl\u00e9ments et des modifications seront apport\u00e9s au fur et \u00e0 mesure de l'avanc\u00e9e du projet Diagho .","title":"Accueil"},{"location":"architecture/annotation/","text":"Service d'annotation","title":"Service d'annotation"},{"location":"architecture/annotation/#service-dannotation","text":"","title":"Service d'annotation"},{"location":"architecture/interpretation/","text":"Service d'interpr\u00e9tation","title":"Service d'interpr\u00e9tation"},{"location":"architecture/interpretation/#service-dinterpretation","text":"","title":"Service d'interpr\u00e9tation"},{"location":"development_guide/coding_style/","text":"Coding style Le projet Diagho est structur\u00e9 en de nombreux microservices \u00e9crit dans diff\u00e9rents langages. Pour faciliter la lecture et le maintient du code, nous nous appuyons sur des bonnes pratiques d'\u00e9criture de code, ou coding style , qui peuvent diff\u00e9rer en fonction du langage utilis\u00e9. Python L'ensemble des fichiers sources \u00e9crits dans le langage Python doit \u00eatre format\u00e9 automatiquement \u00e0 l'aide du module Black qui s'appuie sur les recommendations \u00e9dit\u00e9es dans le Guide du d\u00e9veloppeur Python . Elm L'ensemble des fichiers sources \u00e9crits dans le langage Elm doit \u00eatre format\u00e9 automatiquement \u00e0 l'aide de l'outil elm-format qui s'appuie sur le guide officiel Elm .","title":"Coding style"},{"location":"development_guide/coding_style/#coding-style","text":"Le projet Diagho est structur\u00e9 en de nombreux microservices \u00e9crit dans diff\u00e9rents langages. Pour faciliter la lecture et le maintient du code, nous nous appuyons sur des bonnes pratiques d'\u00e9criture de code, ou coding style , qui peuvent diff\u00e9rer en fonction du langage utilis\u00e9.","title":"Coding style"},{"location":"development_guide/coding_style/#python","text":"L'ensemble des fichiers sources \u00e9crits dans le langage Python doit \u00eatre format\u00e9 automatiquement \u00e0 l'aide du module Black qui s'appuie sur les recommendations \u00e9dit\u00e9es dans le Guide du d\u00e9veloppeur Python .","title":"Python"},{"location":"development_guide/coding_style/#elm","text":"L'ensemble des fichiers sources \u00e9crits dans le langage Elm doit \u00eatre format\u00e9 automatiquement \u00e0 l'aide de l'outil elm-format qui s'appuie sur le guide officiel Elm .","title":"Elm"},{"location":"development_guide/documentation/","text":"La documentation","title":"La documentation"},{"location":"development_guide/documentation/#la-documentation","text":"","title":"La documentation"},{"location":"development_guide/licensing/","text":"Licences","title":"Licences"},{"location":"development_guide/licensing/#licences","text":"","title":"Licences"},{"location":"development_guide/tests/","text":"Les tests","title":"Les tests"},{"location":"development_guide/tests/#les-tests","text":"","title":"Les tests"},{"location":"development_guide/versioning/","text":"La gestion de versions Gestion s\u00e9mantique de version Pour num\u00e9roter les versions des diff\u00e9rents modules de Diagho , nous nous appuyons sur la sp\u00e9cification SemVer , ou Semantic Versioning Specification . En bref, \u00e9tant donn\u00e9 un num\u00e9ro de version MAJEUR.MINEUR.CORRECTIF , il faut incr\u00e9menter : le num\u00e9ro de version MAJEUR quand il y a des changements non r\u00e9trocompatibles ; le num\u00e9ro de version MINEUR quand il y a des ajouts de fonctionnalit\u00e9s r\u00e9trocompatibles ; le num\u00e9ro de version de CORRECTIF quand il y a des corrections d\u2019anomalies r\u00e9trocompatibles. Note L\u2019identifiant de version majeure z\u00e9ro 0.1.0 est destin\u00e9 au d\u00e9veloppement initial. Tout ou partie peut \u00eatre modifi\u00e9 \u00e0 tout moment. Note Lorsque l\u2019API publique est consid\u00e9r\u00e9e stable, l'identifiant de version majeure est incr\u00e9ment\u00e9 \u00e0 1.0.0 . Le fichier CHANGELOG.md Pour chaque repo du projet, un journal des modifications doit \u00eatre tenu, g\u00e9n\u00e9ralement dans le fichier CHANGELOG.md . Exemple de contenu : 1 2 3 4 5 6 # Changelog ## 0.1.0 (unreleased) ### Initial version - Creation of this very application from scratch.","title":"La gestion de versions"},{"location":"development_guide/versioning/#la-gestion-de-versions","text":"","title":"La gestion de versions"},{"location":"development_guide/versioning/#gestion-semantique-de-version","text":"Pour num\u00e9roter les versions des diff\u00e9rents modules de Diagho , nous nous appuyons sur la sp\u00e9cification SemVer , ou Semantic Versioning Specification . En bref, \u00e9tant donn\u00e9 un num\u00e9ro de version MAJEUR.MINEUR.CORRECTIF , il faut incr\u00e9menter : le num\u00e9ro de version MAJEUR quand il y a des changements non r\u00e9trocompatibles ; le num\u00e9ro de version MINEUR quand il y a des ajouts de fonctionnalit\u00e9s r\u00e9trocompatibles ; le num\u00e9ro de version de CORRECTIF quand il y a des corrections d\u2019anomalies r\u00e9trocompatibles. Note L\u2019identifiant de version majeure z\u00e9ro 0.1.0 est destin\u00e9 au d\u00e9veloppement initial. Tout ou partie peut \u00eatre modifi\u00e9 \u00e0 tout moment. Note Lorsque l\u2019API publique est consid\u00e9r\u00e9e stable, l'identifiant de version majeure est incr\u00e9ment\u00e9 \u00e0 1.0.0 .","title":"Gestion s\u00e9mantique de version"},{"location":"development_guide/versioning/#le-fichier-changelogmd","text":"Pour chaque repo du projet, un journal des modifications doit \u00eatre tenu, g\u00e9n\u00e9ralement dans le fichier CHANGELOG.md . Exemple de contenu : 1 2 3 4 5 6 # Changelog ## 0.1.0 (unreleased) ### Initial version - Creation of this very application from scratch.","title":"Le fichier CHANGELOG.md"},{"location":"development_guide/workflow/","text":"Workflow Qu'est-ce que le flux de travail ou workflow ? Le codebase du projet Diagho est h\u00e9berg\u00e9 sur la plateforme GitHub . Pour conserver un codebase coh\u00e9rent et faciliter la collaboration entre contributeurs, nous nous appuyons sur le GitHub flow pour d\u00e9finir les r\u00e8gles de d\u00e9veloppement. Le GitHub flow est l'un des workflows , ou flux de travail, couramment utilis\u00e9 pour les projets open source et peut se r\u00e9sumer en quelques points principaux : la branche main est toujours stable et d\u00e9ployable ; les tags sur la branch main sont consid\u00e9r\u00e9es comme les releases ; les contributeurs doivent forker ou cr\u00e9er une nouvelle branche (s'ils ont les droits suffisants sur le repo original) pour ajouter de nouvelles fonctionnalit\u00e9s ou corriger des bugs et soumettre une pull request afin de fusionner leur branche dans main . En pratique Cloner ou forker le code localement 1 $ git clone git@github.com:DiaghoProject/diagho.git Cr\u00e9er une nouvelle branche et basculer dessus 1 $ git checkout -b name-of-your-bugfix-or-feature D\u00e9finir la branche upstream 1 $ git push --set-upstream origin name-of-your-bugfix-or-feature Ajout des commits et push de la branche sur GitHub 1 2 3 $ git add . $ git commit -m \"Detailed description of your changes.\" $ git push Ouverture d'une Pull Request \u00c9changes et revue du code D\u00e9ploiement Fusion dans la branche principale ( merge ) Ressources Understanding the GitHub flow","title":"Workflow"},{"location":"development_guide/workflow/#workflow","text":"","title":"Workflow"},{"location":"development_guide/workflow/#quest-ce-que-le-flux-de-travail-ou-workflow","text":"Le codebase du projet Diagho est h\u00e9berg\u00e9 sur la plateforme GitHub . Pour conserver un codebase coh\u00e9rent et faciliter la collaboration entre contributeurs, nous nous appuyons sur le GitHub flow pour d\u00e9finir les r\u00e8gles de d\u00e9veloppement. Le GitHub flow est l'un des workflows , ou flux de travail, couramment utilis\u00e9 pour les projets open source et peut se r\u00e9sumer en quelques points principaux : la branche main est toujours stable et d\u00e9ployable ; les tags sur la branch main sont consid\u00e9r\u00e9es comme les releases ; les contributeurs doivent forker ou cr\u00e9er une nouvelle branche (s'ils ont les droits suffisants sur le repo original) pour ajouter de nouvelles fonctionnalit\u00e9s ou corriger des bugs et soumettre une pull request afin de fusionner leur branche dans main .","title":"Qu'est-ce que le flux de travail ou workflow ?"},{"location":"development_guide/workflow/#en-pratique","text":"","title":"En pratique"},{"location":"development_guide/workflow/#cloner-ou-forker-le-code-localement","text":"1 $ git clone git@github.com:DiaghoProject/diagho.git","title":"Cloner ou forker le code localement"},{"location":"development_guide/workflow/#creer-une-nouvelle-branche-et-basculer-dessus","text":"1 $ git checkout -b name-of-your-bugfix-or-feature","title":"Cr\u00e9er une nouvelle branche et basculer dessus"},{"location":"development_guide/workflow/#definir-la-branche-upstream","text":"1 $ git push --set-upstream origin name-of-your-bugfix-or-feature","title":"D\u00e9finir la branche upstream"},{"location":"development_guide/workflow/#ajout-des-commits-et-push-de-la-branche-sur-github","text":"1 2 3 $ git add . $ git commit -m \"Detailed description of your changes.\" $ git push","title":"Ajout des commits et push de la branche sur GitHub"},{"location":"development_guide/workflow/#ouverture-dune-pull-request","text":"","title":"Ouverture d'une Pull Request"},{"location":"development_guide/workflow/#echanges-et-revue-du-code","text":"","title":"\u00c9changes et revue du code"},{"location":"development_guide/workflow/#deploiement","text":"","title":"D\u00e9ploiement"},{"location":"development_guide/workflow/#fusion-dans-la-branche-principale-merge","text":"","title":"Fusion dans la branche principale (merge)"},{"location":"development_guide/workflow/#ressources","text":"Understanding the GitHub flow","title":"Ressources"},{"location":"development_guide/best_practices/internationalization_and_localization/","text":"i18n Internationalisation et r\u00e9gionalisation Info R\u00e8gles g\u00e9n\u00e9rales Pour faciliter la collaboration, l'ensemble de l'application est \u00e9crite en anglais : le code, les docstrings , les variables, les tests, etc. On utilise ensuite diff\u00e9rents outils (list\u00e9s ci-dessous) pour fournir des traductions de l'interface et des objets. Django : dans le code Python gettext() vs ugettext() Depuis Django 2.0 , il s'agit de synonymes. Voici ce que l'on trouve dans le code source de Django 2.2 : 1 2 # An alias since Django 2.0 ugettext = gettext et un peu plus bas : 1 gettext_lazy = ugettext_lazy = lazy ( gettext , str ) Diff\u00e9rences entre gettext() et gettext_lazy() Dans le code source de Django 3.2 : 1 gettext_lazy = lazy ( gettext , str ) R\u00e9ponse int\u00e9ressante not\u00e9e dans python - When should I use ugettext_lazy? - Stack Overflow : In definitions like forms or models you should use ugettext_lazy because the code of this definitions is only executed once (mostly on django's startup); ugettext_lazy translates the strings in a lazy fashion, which means, eg. every time you access the name of an attribute on a model the string will be newly translated-which totally makes sense because you might be looking at this model in different languages since django was started! In views and similar function calls you can use ugettext without problems, because everytime the view is called ugettext will be newly executed, so you will always get the right translation fitting the request! En r\u00e9sum\u00e9 On n'utilise plus ugettext() et ugettext_lazy() , et on utilise gettext() ou gettext_lazy() en fonction des cas. Contrairement \u00e0 gettext() , gettext_lazy() permet de traduire du texte en diff\u00e9r\u00e9, au moment o\u00f9 la cha\u00eene est r\u00e9ellement utilis\u00e9e plut\u00f4t qu\u2019au moment o\u00f9 la fonction est appel\u00e9e. Cas d'utilisation de gettext() ou gettext_lazy() : gettext() gettext_lazy() views validators admin signal models form apps settings context_processors Pour importer ugettext() (ou ugettext_lazy() ) on utilise l'alias _ : 1 from django.utils.translation import gettext as _ 1 from django.utils.translation import gettext_lazy as _ Ressources Utilitaires Django | Documentation de Django | Django 2.2 Utilitaires Django | Documentation de Django | Django 3.2 Django Tips #18 Difference Between ugettext And ugettext_lazy Traduction | Documentation de Django | Django Django : cr\u00e9er et modifier les fichiers de langues Exemple avec une application fictive bidule \u00e0 laquelle on souhaite ajouter les traductions de l'interface en fran\u00e7ais. Se placer dans le r\u00e9pertoire de l'application bidule et cr\u00e9er le dossier locale (s'il n'existe pas encore) : 1 2 $ cd apps/bidule/ $ mkdir -p locale Pour cr\u00e9er ou mettre \u00e0 jour un fichier de messages en fran\u00e7ais, ex\u00e9cutez la commande : 1 $ ../../venv/bin/django-admin makemessages -l fr Editez le fichier locale/fr/LC_MESSAGES/django.po cr\u00e9\u00e9 et compilez le fichier .po en un fichier .mo : 1 $ ../../venv/bin/django-admin compilemessages Django : traduction des mod\u00e8les Il est quelquefois n\u00e9cessaire de traduire des champs de mod\u00e8le. Pour ce faire, on utilise la librairie django-modeltranslation . Par exemple, voir la traduction des champs tagline et description de la classe SiteCustomization de l'application core . Warning Attention aux interactions entre les librairies django-modeltranslation et django-simple-history ! Ne pas utiliser history = HistoricalRecords() dans un mod\u00e8le lorsque celui-ci comporte des champs marqu\u00e9s par django-modeltranslation , mais utiliser plut\u00f4t le fichier translation.py dans lequel on peut r\u00e9f\u00e9rencer un objet apr\u00e8s avoir configur\u00e9 la traduction. Toujour avec l'exemple pr\u00e9c\u00e9dent : 1 2 translator . register ( SiteCustomization , SiteCustomizationTranslationOptions ) simple_history . register ( SiteCustomization )","title":"i18n"},{"location":"development_guide/best_practices/internationalization_and_localization/#i18n","text":"Internationalisation et r\u00e9gionalisation Info R\u00e8gles g\u00e9n\u00e9rales Pour faciliter la collaboration, l'ensemble de l'application est \u00e9crite en anglais : le code, les docstrings , les variables, les tests, etc. On utilise ensuite diff\u00e9rents outils (list\u00e9s ci-dessous) pour fournir des traductions de l'interface et des objets.","title":"i18n"},{"location":"development_guide/best_practices/internationalization_and_localization/#django-dans-le-code-python","text":"","title":"Django : dans le code Python"},{"location":"development_guide/best_practices/internationalization_and_localization/#gettext-vs-ugettext","text":"Depuis Django 2.0 , il s'agit de synonymes. Voici ce que l'on trouve dans le code source de Django 2.2 : 1 2 # An alias since Django 2.0 ugettext = gettext et un peu plus bas : 1 gettext_lazy = ugettext_lazy = lazy ( gettext , str )","title":"gettext() vs ugettext()"},{"location":"development_guide/best_practices/internationalization_and_localization/#differences-entre-gettext-et-gettext_lazy","text":"Dans le code source de Django 3.2 : 1 gettext_lazy = lazy ( gettext , str ) R\u00e9ponse int\u00e9ressante not\u00e9e dans python - When should I use ugettext_lazy? - Stack Overflow : In definitions like forms or models you should use ugettext_lazy because the code of this definitions is only executed once (mostly on django's startup); ugettext_lazy translates the strings in a lazy fashion, which means, eg. every time you access the name of an attribute on a model the string will be newly translated-which totally makes sense because you might be looking at this model in different languages since django was started! In views and similar function calls you can use ugettext without problems, because everytime the view is called ugettext will be newly executed, so you will always get the right translation fitting the request!","title":"Diff\u00e9rences entre gettext() et gettext_lazy()"},{"location":"development_guide/best_practices/internationalization_and_localization/#en-resume","text":"On n'utilise plus ugettext() et ugettext_lazy() , et on utilise gettext() ou gettext_lazy() en fonction des cas. Contrairement \u00e0 gettext() , gettext_lazy() permet de traduire du texte en diff\u00e9r\u00e9, au moment o\u00f9 la cha\u00eene est r\u00e9ellement utilis\u00e9e plut\u00f4t qu\u2019au moment o\u00f9 la fonction est appel\u00e9e. Cas d'utilisation de gettext() ou gettext_lazy() : gettext() gettext_lazy() views validators admin signal models form apps settings context_processors Pour importer ugettext() (ou ugettext_lazy() ) on utilise l'alias _ : 1 from django.utils.translation import gettext as _ 1 from django.utils.translation import gettext_lazy as _","title":"En r\u00e9sum\u00e9"},{"location":"development_guide/best_practices/internationalization_and_localization/#ressources","text":"Utilitaires Django | Documentation de Django | Django 2.2 Utilitaires Django | Documentation de Django | Django 3.2 Django Tips #18 Difference Between ugettext And ugettext_lazy Traduction | Documentation de Django | Django","title":"Ressources"},{"location":"development_guide/best_practices/internationalization_and_localization/#django-creer-et-modifier-les-fichiers-de-langues","text":"Exemple avec une application fictive bidule \u00e0 laquelle on souhaite ajouter les traductions de l'interface en fran\u00e7ais. Se placer dans le r\u00e9pertoire de l'application bidule et cr\u00e9er le dossier locale (s'il n'existe pas encore) : 1 2 $ cd apps/bidule/ $ mkdir -p locale Pour cr\u00e9er ou mettre \u00e0 jour un fichier de messages en fran\u00e7ais, ex\u00e9cutez la commande : 1 $ ../../venv/bin/django-admin makemessages -l fr Editez le fichier locale/fr/LC_MESSAGES/django.po cr\u00e9\u00e9 et compilez le fichier .po en un fichier .mo : 1 $ ../../venv/bin/django-admin compilemessages","title":"Django : cr\u00e9er et modifier les fichiers de langues"},{"location":"development_guide/best_practices/internationalization_and_localization/#django-traduction-des-modeles","text":"Il est quelquefois n\u00e9cessaire de traduire des champs de mod\u00e8le. Pour ce faire, on utilise la librairie django-modeltranslation . Par exemple, voir la traduction des champs tagline et description de la classe SiteCustomization de l'application core . Warning Attention aux interactions entre les librairies django-modeltranslation et django-simple-history ! Ne pas utiliser history = HistoricalRecords() dans un mod\u00e8le lorsque celui-ci comporte des champs marqu\u00e9s par django-modeltranslation , mais utiliser plut\u00f4t le fichier translation.py dans lequel on peut r\u00e9f\u00e9rencer un objet apr\u00e8s avoir configur\u00e9 la traduction. Toujour avec l'exemple pr\u00e9c\u00e9dent : 1 2 translator . register ( SiteCustomization , SiteCustomizationTranslationOptions ) simple_history . register ( SiteCustomization )","title":"Django : traduction des mod\u00e8les"}]}